{"version":3,"file":"static/js/387.665bfaff.chunk.js","mappings":"8KAOe,SAASA,EAAcC,GAA+B,IAA9B,GAAEC,GAAyBD,EAChE,MAAME,GAAWC,EAAAA,EAAAA,KAEjB,OACEC,EAAAA,EAAAA,KAAA,UACEC,UAAU,UACVC,QAASA,KACPJ,GAASK,EAAAA,EAAAA,KAAW,IACpBL,GAASM,EAAAA,EAAAA,IAAUP,IACnBC,GAASO,EAAAA,EAAAA,KAAkB,IAC3BP,GAASQ,EAAAA,EAAAA,KAAW,GAAM,EAC1BC,SACH,aAIL,C,aCrBA,MAIaC,EAAeA,CAC1BC,EACAC,KAA4D,IACzDA,EACHC,WAAYF,EARA,UACD,YCQE,SAASG,EAAIhB,GAA+B,IAA9B,MAAEiB,EAAK,MAAEC,GAAkBlB,EACtD,SAAUmB,GAAcF,GAEjBG,EAAaC,IAAgBC,EAAAA,EAAAA,WAAkB,GAEtD,OACElB,EAAAA,EAAAA,KAAA,WAAAO,UACEY,EAAAA,EAAAA,MAAA,OAAK,cAAaH,EAChBf,UAAU,iBACVmB,YAAaA,KACXH,GAAa,EAAK,EAEpBI,aAAcA,KACZJ,GAAa,EAAM,EACnBV,SAAA,EAEFP,EAAAA,EAAAA,KAACsB,EAAAA,GAAS,CACRC,YAAW,GAAAC,OAAKV,GAChBA,MAAOA,EAAMP,SAGZA,CAACkB,EAAUC,KACV1B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBACb0B,IAAKF,EAASG,YACVH,EAASI,mBACTJ,EAASK,eACbC,MACEvB,EACEkB,EAASjB,WACTgB,EAASK,eAAeC,OAC3BxB,UAEDY,EAAAA,EAAAA,MAAA,MAAAZ,SAAA,EACEP,EAAAA,EAAAA,KAAA,MAAIC,UAAU,OAAMM,SAAEQ,EAAWiB,QACjChC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,QAAOM,SAAEQ,EAAWkB,SAClCjC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,QAAOM,SAAEQ,EAAWmB,cAhBnCpB,GAqBNE,IACDhB,EAAAA,EAAAA,KAACL,EAAc,CACbE,GAAIkB,EAAWlB,SAKzB,C,aCnDA,MAAMsC,GAAqBC,EAAAA,EAAAA,OAAK,IAAM,+BAiDtC,QA3CA,SAAkBxC,GAAiB,IAAhB,MAACyC,GAAazC,EAC/B,MAAM0C,GAAYC,EAAAA,EAAAA,IAAgBC,GAAUA,EAAMF,YAC5CG,GAASF,EAAAA,EAAAA,IAAgBC,GAAUA,EAAM3C,KACzC6C,GAAmBH,EAAAA,EAAAA,IAAgBC,GAAUA,EAAME,mBACnD5C,GAAWC,EAAAA,EAAAA,KAkBjB,OAhBA4C,EAAAA,EAAAA,YAAU,KACRC,MAAM,8CACHC,MAAMC,IACL,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAM,eAADxB,OAAgBsB,EAASG,SAE1C,OAAOH,EAASI,MAAM,IAEvBL,MAAMM,IACLrD,GAASsD,EAAAA,EAAAA,IAAWD,GAAM,IAE3BE,OAAOC,GAAK,yBAAA9B,OAA8B8B,IAC1C,GAEF,CAACxD,IAGFwC,IAAcI,GACZ1C,EAAAA,EAAAA,KAACuD,EAAAA,SAAQ,CAACC,UAAUxD,EAAAA,EAAAA,KAACyD,EAAAA,EAAO,IAAGlD,UAC7BP,EAAAA,EAAAA,KAACmC,EAAkB,CACjBtC,GAAI4C,OAIRzC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uBAAsBM,SAClC8B,EAAMqB,OAAS,GACdrB,EAAMsB,KAAI,CAACC,EAAM9C,KACfd,EAAAA,EAAAA,KAACY,EAAI,CACHC,MAAO+C,EAEP9C,MAAOA,GADF8C,EAAK/D,OAMxB,C","sources":["components/get-post-button/get-posts-button.tsx","utils/index.ts","components/user/user.tsx","components/users-list/users-list.tsx"],"sourcesContent":["import { setClicked, setClickedBackBtn, setUserId, setVisible } from '../../redux/actions';\r\nimport { useAppDispatch } from '../../hooks';\r\n\r\ntype GetPostsButtonProps = {\r\n  id: number;\r\n};\r\n\r\nexport default function GetPostsButton({ id }: GetPostsButtonProps) {\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <button\r\n      className=\"postBtn\"\r\n      onClick={() => {\r\n        dispatch(setClicked(true));\r\n        dispatch(setUserId(id));\r\n        dispatch(setClickedBackBtn(false));\r\n        dispatch(setVisible(true));\r\n      }}\r\n    >\r\n        Get Posts\r\n    </button>\r\n  );\r\n}\r\n","import { DraggingStyle, NotDraggingStyle } from 'react-beautiful-dnd';\r\n\r\nconst green = '#02d18c';\r\nconst pink = '#f3b4c4';\r\n\r\n\r\nexport const getItemStyle = (\r\n  isDragging: boolean,\r\n  DraggableStyle: DraggingStyle | NotDraggingStyle | undefined) => ({\r\n  ...DraggableStyle,\r\n  background: isDragging ? green : pink\r\n});\r\n","import { useState } from 'react';\r\nimport GetPostsButton from '../get-post-button/get-posts-button';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { UserType } from '../../types/user';\r\nimport { getItemStyle } from '../../utils';\r\n\r\ntype UserProps = {\r\n  index: number;\r\n  props: UserType;\r\n}\r\n\r\nexport default function User({ props, index }: UserProps) {\r\n  const {...properties} = props;\r\n\r\n  const [isMouseOver, setMouseOver] = useState<boolean>(false);\r\n\r\n  return (\r\n    <article>\r\n      <div data-testid={isMouseOver}\r\n        className=\"user-container\"\r\n        onMouseOver={() => {\r\n          setMouseOver(true);\r\n        }}\r\n        onMouseLeave={() => {\r\n          setMouseOver(false);\r\n        }}\r\n      >\r\n        <Draggable\r\n          draggableId={`${index}`}\r\n          index={index}\r\n          key={index}\r\n        >\r\n          {(provided, snapshot) => (\r\n            <div className=\"user-description-list\"\r\n              ref={provided.innerRef}\r\n              {...provided.dragHandleProps}\r\n              {...provided.draggableProps}\r\n              style={\r\n                getItemStyle(\r\n                  snapshot.isDragging,\r\n                  provided.draggableProps.style)\r\n              }\r\n            >\r\n              <ul>\r\n                <li className=\"name\">{properties.name}</li>\r\n                <li className=\"email\">{properties.email}</li>\r\n                <li className=\"phone\">{properties.phone}</li>\r\n              </ul>\r\n            </div>\r\n          )}\r\n        </Draggable>\r\n        {isMouseOver &&\r\n        <GetPostsButton\r\n          id={properties.id}\r\n        />}\r\n      </div>\r\n    </article>\r\n  );\r\n}\r\n","import { useEffect, lazy, Suspense } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../hooks';\r\nimport User from '../user/user';\r\nimport { UserType } from '../../types/user';\r\nimport { fetchUsers } from '../../redux/actions';\r\nimport Spinner from '../spinner';\r\n\r\nconst PostsListComponent = lazy(() => import('../posts-list/posts-list'));\r\n\r\ntype Users = {\r\n  users: UserType[];\r\n}\r\n\r\nfunction UsersList({users}: Users){\r\n  const isClicked = useAppSelector((state) => state.isClicked);\r\n  const userId = useAppSelector((state) => state.id);\r\n  const isClickedBackBtn = useAppSelector((state) => state.isClickedBackBtn);\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error: ${response.status}`);\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data: UserType[]) => {\r\n        dispatch(fetchUsers(data));\r\n      })\r\n      .catch((error) => `Could not fetch data: ${error}`\r\n      );\r\n\r\n  }, [dispatch]);\r\n\r\n  return(\r\n    isClicked && !isClickedBackBtn ? (\r\n      <Suspense fallback={<Spinner/>}>\r\n        <PostsListComponent\r\n          id={userId}\r\n        />\r\n      </Suspense>\r\n    ) : (\r\n      <div className=\"users-list-container\">\r\n        {users.length > 0 &&\r\n          users.map((user, index) => (\r\n            <User\r\n              props={user}\r\n              key={user.id}\r\n              index={index}\r\n            />\r\n          ))}\r\n      </div>\r\n    ));\r\n}\r\n\r\nexport default UsersList;\r\n"],"names":["GetPostsButton","_ref","id","dispatch","useAppDispatch","_jsx","className","onClick","setClicked","setUserId","setClickedBackBtn","setVisible","children","getItemStyle","isDragging","DraggableStyle","background","User","props","index","properties","isMouseOver","setMouseOver","useState","_jsxs","onMouseOver","onMouseLeave","Draggable","draggableId","concat","provided","snapshot","ref","innerRef","dragHandleProps","draggableProps","style","name","email","phone","PostsListComponent","lazy","users","isClicked","useAppSelector","state","userId","isClickedBackBtn","useEffect","fetch","then","response","ok","Error","status","json","data","fetchUsers","catch","error","Suspense","fallback","Spinner","length","map","user"],"sourceRoot":""}